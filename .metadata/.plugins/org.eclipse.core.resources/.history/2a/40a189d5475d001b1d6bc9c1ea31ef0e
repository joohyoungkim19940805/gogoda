package com.spring.reply.controller;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.spring.common.service.ChabunService;
import com.spring.common.util.ChabunUtil;
import com.spring.reply.service.ReplyService;
import com.spring.reply.vo.ReplyVO;

@RestController
@RequestMapping(value="/replies")
public class ReplyController {
	Logger logger = Logger.getLogger(ReplyController.class);
	
	@Autowired(required=false)
	private ReplyService replyService;
	
	@Autowired(required=false)
	private ChabunService chabunService;
	
	/*
	 * 댓글 글목록 구현하기
	 * @return List<ReplyVO>
	 * 참고:@PathVariable는 URI의 경로에서 원하는 데이터를 추출하는 용도로 사용.
	 * 		ResponseEntity 타입은 개발자가 직접 결과 데이터와 HTTP의 상태 코드를
	 * 		직접 제어할 수 있는 클래스이다. 404나 500 같은 상태코드를 전송하고 싶은
	 * 		데이터와 함께 전송할 수 있기 때문에 좀 더 세밀한 제어가 가능.
	 **/
	@RequestMapping(value = "/all/{bnum}.sks", method=RequestMethod.GET)
	public ResponseEntity<List<ReplyVO>> list(@PathVariable("bnum")Integer bnum){
		
		ResponseEntity<List<ReplyVO>> entity = null;
		try {
				entity = new ResponseEntity<>(replyService.replyList(bnum),HttpStatus.OK);
		} catch (Exception e) {
				e.printStackTrace();
				entity = new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		return entity;
	}
	
	/*
	 * 댓글 글쓰기 구현하기
	 * @return String
	 * 참고 : @RequestBody
	 * */
	public ResponseEntity<String> replyInsert(@RequestBody ReplyVO rvo){
		logger.info("replyInsert 호출 성공");
		
		String rnum = ChabunUtil.getBoardChabun("N", chabunService.getBoardChabun().getBnum() );
		
		rvo.setRnum(rnum);;
		
		ResponseEntity<String> entity = null;
		int result;
		try {
			result = replyService.replyInsert(rvo);
			if (result == 1) {
				 	entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
			}
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return entity;
	}
	
	/*
	 * 댓글 수정 구현하기
	 * @return
	 * 참고:REST 방식에서 UPDATE 작업은 PUT,PATCH 방식을 이용해서 처리.
	 * 	     전체 데이터를 수정하는 경우에는 PUT을 이용하고,
	 * 	     일부의 데이터를 수정하는 경우에는 PATCH를 이용.
	 **/
	@RequestMapping(value="/{rnum}.sks", method= {RequestMethod.PUT, RequestMethod.PATCH})
	public ResponseEntity<String> replyUpdate(@PathVariable("rnum") String rnum,
											  @RequestBody ReplyVO rvo){
		logger.info("replyUpdate 호출 성공");
		ResponseEntity<String> entity = null;
		try {
			rvo.setRnum(rnum);
			replyService.replyUpdate(rvo);
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return entity;
	}
	
	/*
	 * 댓글 삭제 구현하기
	 * @return
	 * 참고:REST 방식에서 DELETE 작업은 DELETE 방식을 이용해서 처리.
	 * */
	@RequestMapping(value = "/{rnum}.sks", method=RequestMethod.DELETE)
	public ResponseEntity<String> replyDelete(@PathVariable("rnum") Integer rnum){
		logger.info("replyDelete 호출 성공");
		ResponseEntity<String> entity = null;
		try {
		 	replyService.replyDelete(rnum);
		 	entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.BAD_REQUEST);
		}
		return entity;
	}
}
